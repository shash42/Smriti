{"version":3,"sources":["../../src/tasks/part1.js"],"names":["Run","tokenizer","nlp","WordTokenizer","ocrText","speechText","mode","keywordsArr","Wordobj","text","tag","i","j","inptargettext","JSON","parse","inprecogtext","matchtype","numlinestarget","length","numlinesrecog","targettext","recogtext","INF","dp0","prev0","tokenize","lineartarget","push","linearrecog","numwordstarget","numwordsrecog","trans1","trans2","trans3","currstate","prevcand","missedlist","reverse","console","log","stringify"],"mappings":"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","file":"part1.js","sourcesContent":["import nlp from 'natural';\r\nlet tokenizer = new nlp.WordTokenizer();\r\n//let w2v = require('word2vec');\r\nimport postagger from 'pos';\r\n\r\nexport function Run(ocrText, speechText, mode, keywordsArr) {\r\n\tfunction Wordobj() {\r\n\t\tthis.text=\"\";\r\n\t\tthis.tag=\"\";\r\n\t} \r\n\tlet i, j;\r\n\tlet inptargettext = JSON.parse(ocrText); //INPUT from OCR/Text/Handwriting afte grammarcheck. Each array element is a line.\r\n\tlet inprecogtext = JSON.parse(speechText); //INPUT when user speaking out during learning after grammarcheck. Each array element is a line.\r\n\tlet matchtype = mode; //INPUT 0 = word to word, 1 = order matters, paraphrasing works, 2 = order also doesnt matter\r\n\tlet numlinestarget=inptargettext.length;\r\n\tlet numlinesrecog=inprecogtext.length;\r\n\tlet targettext = [];\r\n\tlet recogtext = [];\r\n\tconst INF = 1e5;\r\n\tlet dp0 = []; //for word to word, cost = number of targettext dropped\r\n\tlet prev0 = []; //for word to word\r\n\tfor(i = 0; i < numlinestarget; i++)\r\n\t{\r\n\t\ttargettext[i]=[];\r\n\t\ttargettext[i]=tokenizer.tokenize(inptargettext[i]);\r\n\t}\r\n\tfor(i = 0; i < numlinesrecog; i++)\r\n\t{\r\n\t\trecogtext[i]=[];\r\n\t\trecogtext[i]=tokenizer.tokenize(inprecogtext[i]);\r\n\t}\r\n\tif(matchtype==0)\r\n\t{\r\n\t\tlet lineartarget = [];\r\n\t\tlineartarget.push(\"null\");\r\n\t\tlet linearrecog = [];\r\n\t\tlinearrecog.push(\"null\");\r\n\t\tfor(i = 0; i < numlinestarget; i++)\r\n\t\t{\r\n\t\t\tfor(j = 0; j < targettext[i].length; j++)\r\n\t\t\t{\r\n\t\t\t\tlineartarget.push(targettext[i][j]);\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor(i = 0; i < numlinesrecog; i++)\r\n\t\t{\r\n\t\t\tfor(j = 0; j < recogtext[i].length; j++)\r\n\t\t\t{\r\n\t\t\t\tlinearrecog.push(recogtext[i][j]);\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet numwordstarget=lineartarget.length;\r\n\t\tlet numwordsrecog=linearrecog.length;\r\n\t\tfor(i = 0; i <= numwordstarget; i++)\r\n\t\t{\r\n\t\t\tdp0[i]=[];\r\n\t\t\tprev0[i]=[];\r\n\t\t\tfor(j = 0; j <= numwordsrecog; j++)\r\n\t\t\t{\r\n\t\t\t\tdp0[i].push(INF);\r\n\t\t\t\tprev0[i][j]=[];\r\n\t\t\t}\r\n\t\t}\r\n\t\t//console.log(lineartarget + \"\\n\" + linearrecog);\r\n\t\t//***set base states***\r\n\t\tdp0[0][0]=dp0[0][1]=0;\r\n\t\tprev0[0][0]=prev0[0][1]= [0, 0];\r\n\t\tdp0[1][0]=1;\r\n\t\tprev0[1][0]=[0, 0];\r\n\t\t//***end base states***\r\n\t\tfor(i = 1; i <= numwordstarget; i++)\r\n\t\t{\r\n\t\t\tfor(j = 1; j <= numwordsrecog; j++)\r\n\t\t\t{\r\n\t\t\t\tlet trans1=dp0[i-1][j-1];\r\n\t\t\t\tif(lineartarget[i]!=linearrecog[j]) trans1=INF;\r\n\t\t\t\tlet trans2=dp0[i-1][j]+1;\r\n\t\t\t\tlet trans3=dp0[i][j-1];\r\n\t\t\t\tif(trans1<=trans2 && trans1<=trans3)\r\n\t\t\t\t{\r\n\t\t\t\t\tdp0[i][j]=trans1;\r\n\t\t\t\t\tprev0[i][j]=[i-1, j-1];\r\n\t\t\t\t}\r\n\t\t\t\telse if(trans3<=trans1 && trans3<=trans2)\r\n\t\t\t\t{\r\n\t\t\t\t\tdp0[i][j]=trans3;\r\n\t\t\t\t\tprev0[i][j]=[i, j-1];\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tdp0[i][j]=trans2;\r\n\t\t\t\t\tprev0[i][j]=[i-1, j];\r\n\t\t\t\t}\r\n\t\t\t//\tconsole.log(i + \" \" + j + \" = \" + prev0[i][j]);\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet currstate = [];\r\n\t\tcurrstate = [numwordstarget, numwordsrecog];\r\n\t\t//console.log(prev0[numwordstarget][numwordsrecog]);\r\n\t\tlet prevcand = [];\r\n\t\tlet missedlist = [] //FINAL OUTPUT WITH LIST OF MISSED WORDS\r\n\t\twhile(true)\r\n\t\t{\r\n\t\t//\tconsole.log(currstate + \"\\n\");\r\n\t\t\tprevcand = prev0[currstate[0]][currstate[1]];\r\n\t\t\tif(prevcand==currstate) break;\r\n\t\t\tif(prevcand[0]==currstate[0]-1 && prevcand[1]==currstate[1])\r\n\t\t\t{\r\n\t\t\t\tmissedlist.push(lineartarget[currstate[0]]);\r\n\t\t\t}\r\n\t\t\tcurrstate=prevcand;\r\n\t\t}\r\n\t\tmissedlist.reverse();\r\n\r\n\t\tconsole.log(\"Number of Skipped words from target content=\" + dp0[numwordstarget][numwordsrecog] + \"\\n\");\r\n\t\tmissedlist.push(dp0[numwordstarget][numwordsrecog]);\r\n\t\treturn JSON.stringify(missedlist); //OUTPUT MISSED LIST AS YOU WANT\r\n\t}\r\n\r\n}\r\n"]}