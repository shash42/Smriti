{"version":3,"sources":["../../src/tasks/part2.js"],"names":["Run2","nlp","require","tokenizer","WordTokenizer","postagger","ocrText","speechText","mode","keywordsArr","Wordobj","text","tag","i","j","inptargettext","JSON","parse","inprecogtext","matchtype","numlinestarget","length","numlinesrecog","targettext","recogtext","INF","dp0","prev0","tokenize","ss","similarity","sentenceSimilarity","similarityScore","winkOpts","f","winklerMetaphone","options","threshold","mat","empty","used","matching","missedlist","push","mx","mxi","temp","score"],"mappings":"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","file":"part2.js","sourcesContent":["var nlp = require('natural');\r\nvar tokenizer = new nlp.WordTokenizer();\r\n//var w2v = require('word2vec');\r\nvar postagger=require('pos');\r\n\r\nexport function Run2(ocrText, speechText, mode, keywordsArr) {\r\n\r\n\r\n\r\n\tfunction Wordobj()\r\n\t{\r\n\t\tthis.text=\"\";\r\n\t\tthis.tag=\"\";\r\n\t}\r\n\tvar i, j;\r\n\tvar inptargettext = JSON.parse(ocrText); //INPUT from OCR/Text/Handwriting afte grammarcheck. Each array element is a line.\r\n\tvar inprecogtext = JSON.parse(speechText); //INPUT when user speaking out during learning after grammarcheck. Each array element is a line.\r\n\tvar matchtype = mode; //INPUT 0 = word to word, 1 = order matters, paraphrasing works, 2 = order also doesnt matter \r\n\tvar numlinestarget=inptargettext.length;\r\n\tvar numlinesrecog=inprecogtext.length;\r\n\tvar targettext = [];\r\n\tvar recogtext = [];\r\n\tconst INF = 1e5;\r\n\tvar dp0 = []; //for word to word, cost = number of targettext dropped\r\n\tvar prev0 = []; //for word to word\r\n\tfor(i = 0; i < numlinestarget; i++)\r\n\t{\r\n\t\ttargettext[i]=[];\r\n\t\ttargettext[i]=tokenizer.tokenize(inptargettext[i]);\r\n\t}\r\n\tfor(i = 0; i < numlinesrecog; i++)\r\n\t{\r\n\t\trecogtext[i]=[];\r\n\t\trecogtext[i]=tokenizer.tokenize(inprecogtext[i]);\r\n\t}\r\n\r\n\t\tlet ss = require('sentence-similarity')\r\n\t \r\n\t    let similarity = ss.sentenceSimilarity;\r\n\t    let similarityScore = ss.similarityScore;\r\n\t\t\tlet winkOpts = { f: similarityScore.winklerMetaphone, options : {threshold: 0} }\r\n\t \tlet mat = [];\r\n\t\tlet empty=[];\r\n\t\tlet used= [];\r\n\t\tlet matching=[];\r\n\t\tlet missedlist=[];\r\n\t\tfor(i = 0; i < numlinesrecog; i++)\r\n\t\t{\r\n\t\t\tused.push(0);\r\n\t\t\tmatching.push(-1);\r\n\t\t}\r\n\t\tfor(i = 0; i < numlinestarget; i++)\r\n\t\t{\r\n\t\t\tmat.push(empty);\r\n\t\t\tlet mx=-1, mxi=0;\r\n\t\t\tfor(j = 0; j < numlinesrecog; j++)\r\n\t\t\t{\r\n\t\t\t\tif(used[j]) continue;\r\n\t\t\t\t//console.log(similarity(targettext[i], recogtext[j], winkOpts) + \"\\n\");\r\n\t\t\t\tvar temp=similarity(targettext[i], recogtext[j], winkOpts);\r\n\t\t\t\t//console.log(temp.score + \"\\n\");\r\n\t\t\t\tmat[i].push(temp.score);\r\n\t\t\t\tif(temp.score>mx)\r\n\t\t\t\t{\r\n\t\t\t\t\tmx=temp.score;\r\n\t\t\t\t\tmxi=j;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t//\tconsole.log(mx + \"\\n\");\r\n\t\t\tif(mx>=targettext[i].length-1)\r\n\t\t\t{\r\n\t\t\t\tmatching[i]=mxi;\r\n\t\t\t\tused[mxi]=1;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmissedlist.push(i);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn missedlist; //OUTPUT JAISE LENI HO LE LIYO\r\n\t}"]}